#!/usr/bin/env bash

USAGE=$(cat << 'EOS'
devtool - Useful development tool for myapp

Usage:
    bin/devtool [COMMAND] [ARGS...]

Commands:
    setup     Build or rebuild development environment
    update    Rebuild development environment
    start     Start development server
    stop      Stop development server (Execute `docker-compose stop`)
    destroy   Destory development environment (Execute `docker-compose down -v`)
    restart   Restart container (Execute `docker-compose restart [CONTAINER]`)
              Usage: bin/devtool restart [CONTAINER]
    exec      Run a command in a container
              If container is running, execute `docker-compose exec [CONTAINER] [COMMAND]`,
              otherwise execute `docker-compose run --rm [CONTAINER] [COMMAND]`
              Usage: bin/devtool exec [CONTAINER] [COMMAND]
EOS
)

set -eu

export PROJECT_ROOT=$(cd "$(dirname "${BASH_SOURCE:-$0}")"; cd ..; pwd)
export DOCKER_COMPOSE_SERVICES=($(docker-compose ps --services))

########################################################################
# common functions
########################################################################

print() {
    printf "\e[4mdevtool\e[0m: "
    echo "$@"
}

print_exec() {
    print "$@"
    "$@"
}

command_exist() {
    type "$1" >/dev/null 2>&1
    return $?
}

subcommand_exists() {
    local cmd=$1
    grep -q "^cmd_$cmd(" "$PROJECT_ROOT/bin/devtool"
}

array_contains() {
    local e match="$1"
    shift
    for e; do [ "$e" == "$match" ] && return 0; done
    return 1
}

########################################################################
# commands
########################################################################

cmd_setup() {
    if [ ! -f .env ]; then
        print_exec cp .env.sample .env
    fi

    print_exec docker-compose down -v
    print_exec docker-compose build
    print_exec docker-compose run --rm rails yarn install
    print_exec docker-compose run --rm rails bundle install
    print_exec docker-compose run --rm rails bundle exec db:migrate
}

cmd_update() {
    if [ ! -f .env ]; then
        print_exec cp .env.sample .env
    fi

    print_exec docker-compose down
    print_exec docker-compose build
    print_exec docker-compose run --rm rails yarn install
    print_exec docker-compose run --rm rails bundle install
    print_exec docker-compose run --rm rails bundle exec rake ridgepole:apply
}

cmd_start() {
    if [ -f tmp/pids/server.pid ]; then
        print_exec rm tmp/pids/server.pid
    fi

    print_exec docker-compose up
}

cmd_stop() {
    print_exec docker-compose stop "$@"
}

cmd_destroy() {
    print_exec docker-compose down -v --rmi local
}

cmd_restart() {
    if [[ $# -eq 0 ]]; then
        print "ERROR: No container specified"
        print "Usage: bin/devtool restart [CONTAINER]"
        exit 1
    fi

    local container=$1
    shift

    if ! array_contains "$container" "${DOCKER_COMPOSE_SERVICES[@]}"; then
        print "ERROR: No such container: $container"
        print "Usage: bin/devtool restart [CONTAINER]"
        exit 1
    fi

    print_exec docker-compose restart "$container"
}

cmd_exec() {
    if [[ $# -eq 0 ]]; then
        print "ERROR: No container specified"
        print "Usage: bin/devtool exec [CONTAINER] [COMMAND]"
        exit 1
    fi

    local container=$1
    shift

    if ! array_contains "$container" "${DOCKER_COMPOSE_SERVICES[@]}"; then
        print "ERROR: No such container: $container"
        print "Usage: bin/devtool exec [CONTAINER] [COMMAND]"
        exit 1
    fi

    if docker-compose ps --filter "status=running" --services | grep -q "$container"; then
        print_exec docker-compose exec "$container" "$@"
    else
        print_exec docker-compose run --rm "$container" "$@"
    fi
}

cmd_help() {
    echo "$USAGE"
}

# aliases
cmd_-h() { cmd_help; }
cmd_--help() { cmd_help; }

########################################################################
# main
########################################################################

main() {
    if ! command_exist docker; then
        print "ERROR: devtool requires Docker for development"
        exit 1
    fi

    if ! command_exist docker-compose; then
        print "ERROR: devtool requires Docker Compose for development"
        exit 1
    fi

    if [ $# -eq 0 ]; then
        cmd_help
        exit 1
    fi

    local cmd=$1
    shift

    if subcommand_exists "$cmd"; then
        "cmd_$cmd" "$@"
    else
        print "ERROR: '$cmd' is not a devtool command"
        echo
        cmd_help
        exit 1
    fi
}

main "$@"
